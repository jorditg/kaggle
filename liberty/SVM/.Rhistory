library('e1071') # SVM library
rmse <- function(error) 
{
  sqrt(mean(error^2))
}
# load data
x <- read.csv('/home/jordi/Escritorio/liberty/data/SVM-x-1.csv')
y <- read.csv('/home/jordi/Escritorio/liberty/SVM-y-1.csv')
# train SVM
timer <- proc.time()
#tuneResult <- tune(svm, x, y, kernel = 'radial', ranges = list(epsilon = seq(0,1,0.1), cost = 2^2))
model <- svm(x, y, kernel = 'radial', epsilon = 0.1, cost = 2^2)
proc.time() - timer
# calculate error
#predictedY <- predict(model, x)
#error <- y - predictedY
error <- model$residuals
predictionRMSE <- rmse(error) 
# predict test data
x_test = read.csv('/home/jordi/Escritorio/liberty/test-features-161-SVM.txt')
pred <- predict(model, x_test)
# save results
write.csv(pred, 'test-output.csv')
# export SVM object to file
library('e1071') # SVM library
rmse <- function(error) 
{
  sqrt(mean(error^2))
}
# load data
x <- read.csv('/home/jordi/Escritorio/liberty/data/SVM-x-1.csv')
y <- read.csv('/home/jordi/Escritorio/liberty/data/SVM-y-1.csv')
# train SVM
timer <- proc.time()
#tuneResult <- tune(svm, x, y, kernel = 'radial', ranges = list(epsilon = seq(0,1,0.1), cost = 2^2))
model <- svm(x, y, kernel = 'radial', epsilon = 0.1, cost = 2^2)
proc.time() - timer
# calculate error
#predictedY <- predict(model, x)
#error <- y - predictedY
error <- model$residuals
predictionRMSE <- rmse(error) 
# predict test data
x_test = read.csv('/home/jordi/Escritorio/liberty/test-features-161-SVM.txt')
pred <- predict(model, x_test)
# save results
write.csv(pred, 'test-output.csv')
# export SVM object to file
write.svm(model, svm.file = "SVM-1.svm", scale.file = "SVM-1.scale")
predictionRMSE
